[{"categories":null,"content":" 注意：技术无关贴 ","date":"2021-02-20","objectID":"/%E4%BB%8C/:0:0","tags":["技术以外"],"title":"浅谈“人上人”","uri":"/%E4%BB%8C/"},{"categories":null,"content":"转起来 上班族们的年假已经放完了，但是俺滴寒假还没有。在如此惠风和畅，春暖人间的好时节，喊起几个狐朋狗友开黑连麦，骚话连篇，🐎️枪作乐，🍌️道涅磐，不亦乐乎？ 但是总有那么几个坏坯，不知道从x宝还是x多多整出一些邪恶科技，无耻地成为了千里眼，低头族，龙卷风。鸟狙响，菊花残，满地伤。 为啥老有这么多挂哥？无非是: 想赢 装🍺️ 单纯想让其他玩家不爽 你开我也开 最先进行科技升级的，往往是前两种人。游戏拥有输赢，那就只有输赢。为了赢，可以不择手段。 大仙们有时抱有起码的羞耻心，还会故意空几枪演一演，照顾一下凡人。心情不好了，就直接霸王硬上弓，把对方碾成渣渣。被伤害的绿色玩家忍的忍，逃的逃，打不过就加入，于是游戏环境每况愈下，直到最后整个游戏环境成为外挂的牺牲品，成为“人上人”的牺牲品。 ","date":"2021-02-20","objectID":"/%E4%BB%8C/:1:0","tags":["技术以外"],"title":"浅谈“人上人”","uri":"/%E4%BB%8C/"},{"categories":null,"content":"人上人之心 开挂的不一定是人上人，但是开挂和正常人打的十有八九想做人上人。人上人，千百年来有人鄙夷它，有人漠视它，甚至不少人流血拼命地想把它砸得粉碎；不过更多的还是匍跪在其脚底下的拥簇，互相踩着对方向上爬，垒成《僵尸世界大战》爬救赎之墙的人梯，只为了离人上人的宝座近一点。 人的伟大之处，在于特化和变异成机器。评价的标准越是单一，就越能催人奋起，成为不断冲刷记录的机器。 ","date":"2021-02-20","objectID":"/%E4%BB%8C/:2:0","tags":["技术以外"],"title":"浅谈“人上人”","uri":"/%E4%BB%8C/"},{"categories":null,"content":"人上人之路 进入中学之后，俺渐渐认识到成为人上人是一项崇高的事业，是不可阻挡的历史潮流。 对于中学生而言，只要考的好，那么你就能成为人上人。为了将人有限的精力集中在学习上，社会各界想破了头。扩容课程时间，提高“无关事务”效率，严查严打有害事务。记得自15年以后的每一次集会，校领导都会在台上对自己在一个叫衡水的圣地取来的经验侃侃而谈，无非五点起床，军事化管理，吃饭很快，日理万卷云云。不过可惜他的话只是停留在嘴皮子上，否则俺现在应该也是人上人了罢。（笑） 成为人上人的路上，吃苦是不可少的；而且应该坚持吃苦。食堂的饭不必好吃，若是上课了还想着吃饭，那还了得？学生的教室不必装空调，即便温度达到了35℃无论老师学生都在忙着扇风，那也能锻炼艰苦奋斗的精神。 ","date":"2021-02-20","objectID":"/%E4%BB%8C/:3:0","tags":["技术以外"],"title":"浅谈“人上人”","uri":"/%E4%BB%8C/"},{"categories":null,"content":"九点起床 但是无尽的竞争使人疲惫。人再怎么特化，也有人性，也需要窝，需要娱乐来放松身心，需要休息来养精蓄锐。 若是游戏也逃不过只要赢的单线思维，以胜利而非快乐为中心，那便显然是得不偿失了。如果生活也是为了成为人上人而特化，那变得无趣显然也是顺便的。 希望未来的休息日，每个人都能心安理得地九点起床。而不必为自己的明天做无谓的焦虑。 ","date":"2021-02-20","objectID":"/%E4%BB%8C/:4:0","tags":["技术以外"],"title":"浅谈“人上人”","uri":"/%E4%BB%8C/"},{"categories":["6.S081"],"content":"Preface It is considered to be important to have an overview of Operating Systems. However, due to my laziness and the radio-building-oriented subject I major in, I hardly complete any courses about OSs. After the spring festival, feeling still knowing little about OS and losing ability on computer programming, I picked up xv6 labs from MIT 6.S081 courses again, hoping by coping with them will be of help. The hardest thing I came up with is not What to do but How to do and Why doing so works. ","date":"2021-02-18","objectID":"/6s081-a/:1:0","tags":["Operating System"],"title":"6.S081 lab1 write up","uri":"/6s081-a/"},{"categories":["6.S081"],"content":"Lab: Utils In this lab, I am assigned to finish a few UNIX utilities. It is not that difficult. All system calls can be found in user/user.h. Always check about hints before solving a task. ","date":"2021-02-18","objectID":"/6s081-a/:2:0","tags":["Operating System"],"title":"6.S081 lab1 write up","uri":"/6s081-a/"},{"categories":["6.S081"],"content":"sleep As a single program running on OS, you cannot count on yourself to sleep an exact period of time. Instead of using dead loops, you should use system calls to acquire aid from the kernel. After referring to the xv6 guide book, I find a system call named sleep(), which I need to do next is to pack it up into a user program. How to write a user program for xv6? By looking up other programs, I got ambiguous knowledge about it. All user programs start executing from their main() functions, arguments from console passed to the program from string array argv. argc is the number of arguments in argv. # console input sleep 114514 // console parsed arguments and pased it to the program. // be await that argv[0] is the program name. int argc = 2; char *argv[] = {\"sleep\", \"114514\"}; Programs can also take user inputs from stdin, whose fd is normally 0. It can be redirected to files or console outputs. scanf() in stdio.h takes input from it. And functions like printf() writes data to stdout, whose fd is normally 1. It can also be redirected to files. If there is an error in your program and you want to print a message about what is going on, you should print it to stderr whose fd is normally 2. fprintf() is used for this purpose. So what we need to do is to pack up the system call sleep() with a program realized in user/sleep.c, and add it to Makefile. The program should take its argument from argv. ","date":"2021-02-18","objectID":"/6s081-a/:2:1","tags":["Operating System"],"title":"6.S081 lab1 write up","uri":"/6s081-a/"},{"categories":["6.S081"],"content":"pingpong \u0026 primes As I know, communicating between processes have mainly two ways: Share memory to communicate Using buffer or file that could be accessed by both sender and receiver. However, this usually leads to troubling issues like data racing that you should deal with it carefully. We call the buffer/file Critical Section. And there are mechanisms like mutex and semaphore to prevent data racing or dirty data issues. Communicate with pipes, channels Using pipes is much easier than dealing with shared memory in my point of view. When reading from an empty pipe, the process will be blocked until there are new data flushed in pipes or pipes being closed. Pipes can be provided by OS, and some modern languages like Go have a language level support for pipes (referred as ch(channel) in Go). As for pingpong, we can solve it by using 2 processes connected by 2 pipes, but be careful that if 2 process use printf() at the same time, the output will be messed up. As for primes, things get tricky a little. However, the link in the problem description had almost told you the answer. I complete the task by realizing a void subprime(int* r_end) function, which works like below: I will change the graph’s engine into flowchart.js someday later… ","date":"2021-02-18","objectID":"/6s081-a/:2:2","tags":["Operating System"],"title":"6.S081 lab1 write up","uri":"/6s081-a/"},{"categories":["6.S081"],"content":"find Just by adopting user/ls.c, you can get a medium well find program. Files and directories in Linux are referred to as inodes. Most of the file system layouts are like a tree with files/directories as nodes in it. To access files in directories, you can use a fd point to the path, and use read() to read files/dirs under the directory, the data structure used to store child files/directories is struct dirent. Now that you are assigned to develop a find program, you should use the function on child directories, so that the program can look up recursively. ","date":"2021-02-18","objectID":"/6s081-a/:2:3","tags":["Operating System"],"title":"6.S081 lab1 write up","uri":"/6s081-a/"},{"categories":["6.S081"],"content":"xargs In fact, this task is pretty simple, but the way xargs works come out to be a little hard to understand. The way xargs works can be concluded into pseudo code like below: # string argv[] stdin = input() stdv = stdin.split() for arg in stdv: arg_full = list.append(argv, arg) arg_full.pop(0) fork( # argv[0] is \"xargs\", which should be dropped. execute(arg_full) ) ","date":"2021-02-18","objectID":"/6s081-a/:2:4","tags":["Operating System"],"title":"6.S081 lab1 write up","uri":"/6s081-a/"},{"categories":["6.S081"],"content":"Conclusion Working on labs did give me an ambiguous impression about multithread programming, file systems and OS programming. There are still many jobs to be done. My lab repository is -\u003e here. ","date":"2021-02-18","objectID":"/6s081-a/:3:0","tags":["Operating System"],"title":"6.S081 lab1 write up","uri":"/6s081-a/"},{"categories":null,"content":" 如上是一个利用 mermaid 绘制的 SVG 图形 ，相比于直接在某些软件绘制好再截图，显然利用 mermaid 绘图具备诸多优点： 网站保存的是带 mermaid 的 markdown 文件，不涉及到图片存储。存储占用小。 渲染出图是 SVG 格式，上面的文字可以直接拷贝。 网站数据传输时是使用 mermaid 源码，而不是图片，可以有效减少网站加载过程产生的流量耗费。 ","date":"2021-01-29","objectID":"/add_mermaid_support_to_even_theme/:0:0","tags":["折腾","前端"],"title":"俺如何为 hugo-theme-even 提供 mermaid 支持","uri":"/add_mermaid_support_to_even_theme/"},{"categories":null,"content":"如何为你的 Hugo 博客引入 mermaid 支持？ 贴士 虽然由于 even theme 更新过慢，似乎久已无更多维护，因此本站已经开始使用 LoveIt 作为主题。 但是对于 even theme 而言，本方法应当依旧适用。 对于这一点，俺可以说前人之述备矣。反手就是一堆参考资料： Diagrams in hugo with mermaid 拓展 Hugo 的 MarkDown 流程图 这些解决方案引入 mermaid 的方法简单素雅，这一套流程可以总结为： 在博客中加载 mermaidJS。具体方法有： 直接在一定会加载的 HTML 文件中引入 \u003cscript\u003e 标签，加载 mermaid。 在部分支持自定义 JavaScript 的主题中，引入 JavaScript 文件。 自定义 ShortCodes，依靠 ShortCodes 实现标签替换。 但是习惯了通过 typora 之类的 MarkDown 拓展编辑器，他们无一例外都支持按照如下风格进行渲染： ```mermaid ... 图表内容 ... ``` 能不能实现它，从而实现更加一颗赛艇的编辑体验呢？ 能的。 ","date":"2021-01-29","objectID":"/add_mermaid_support_to_even_theme/:1:0","tags":["折腾","前端"],"title":"俺如何为 hugo-theme-even 提供 mermaid 支持","uri":"/add_mermaid_support_to_even_theme/"},{"categories":null,"content":"实现原理 通过阅读 mermaid 的 API 咱们可以得知 mermaidAPI 渲染 mermaid 图形的大致流程： 上述的特定标签是指\u003cdiv class=\"mermaid\"\u003e的 HTML 标签。通过检查页面元素，咱们会发现如今的大部分博客将代码块渲染成如下式样： \u003cpre\u003e\u003ccode class=\"language-语言种类\"\u003e \u003c!-- code --\u003e \u003c/code\u003e\u003c/pre\u003e 也就是说咱们只需要找到形如： \u003cpre\u003e\u003ccode class=\"language-mermaid\"\u003e \u003c!-- mermaid code --\u003e \u003c/code\u003e\u003c/pre\u003e 的代码块，并将其替换成\u003cdiv class=\"mermaid\"\u003e即可。 ","date":"2021-01-29","objectID":"/add_mermaid_support_to_even_theme/:2:0","tags":["折腾","前端"],"title":"俺如何为 hugo-theme-even 提供 mermaid 支持","uri":"/add_mermaid_support_to_even_theme/"},{"categories":null,"content":"在 even theme 中的实现 注意 注意： 下文中的 “/” 目录代表 even theme 项目的根目录而不是 *nix 文件系统的 root. 本博客使用的是 even theme. 但是俺相信参照本文在其他博客中进行实现也会大差不差。 俺在自己实现了此种风格之后即向 hugo-theme-even 提出了 PR，even theme 的用户应该可以在不久以后在新版本中得到 mermaid 支持。 ","date":"2021-01-29","objectID":"/add_mermaid_support_to_even_theme/:3:0","tags":["折腾","前端"],"title":"俺如何为 hugo-theme-even 提供 mermaid 支持","uri":"/add_mermaid_support_to_even_theme/"},{"categories":null,"content":"导入 mermaid.min.js 实现应当遵循原理的指示精神，首先咱们需要拥有 mermaid 库。通过观察源码猜测 even 主题在 /static/layouts/partials/scripts.html 中进行 JS 的载入。于是咱们向其中插入能够引入 mermaid 模块的 script 标签。（实际上只要是会被加载的 HTML 文件都可以插） 这个标签在 HTML 文件里随便找个地方插就完事了，如果完全不懂，建议怼到 HTML 文件末尾。 通过 CDN 导入 为了保持文章的时效性，俺不会直接提供该 script 标签，但是你可以在 jsdelivr.com 中找到你中意版本的 mermaid.min.js 并按下右边的 Copy HTML + SRI 按钮即可获得对应的标签。 通过本地文件导入 由于房间里的大象太大挡住了境外CDN的信号，所以你也可以选择本地文件。在网上找到你中意版本的 mermaid.min.js, 下载下来并放在 /static/lib/mermaid/ 目录下（没有就新建一个），这时可以得到对应的 script 标签如下： \u003cscript src=\"{{ \"lib/mermaid/mermaid.min.js\" | relURL }}\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e 本人对境外 CDN 在内地的稳定性持悲观态度，建议中国大陆用户使用此方法。 ","date":"2021-01-29","objectID":"/add_mermaid_support_to_even_theme/:3:1","tags":["折腾","前端"],"title":"俺如何为 hugo-theme-even 提供 mermaid 支持","uri":"/add_mermaid_support_to_even_theme/"},{"categories":null,"content":"替换 HTML 标签 观察 even 主题的源码，咱们可以在 /assets/js/ 目录下发现 main.js 和 even.js。在 even.js 中插入如下代码段： // 插到文件末尾完事了 Even.mermaid = function () { if (!window.mermaid) return; const blocks = document.querySelectorAll(\"pre code.language-mermaid\"); // change all \u003cpre\u003e\u003ccode mamaid\u003e tags to \u003cdiv class=\"mermaid\"\u003e // mermaid will handle the rest! for (let i = 0; i \u003c blocks.length; i++) { if (!window.hljs \u0026\u0026 i % 2 === 0) continue; const block = blocks[i]; const rootElement = window.hljs ? block.parentElement : block.parentElement.parentElement.parentElement.parentElement .parentElement.parentElement.parentElement; var container = document.createElement(\"div\"); const id = `js-mermaid-diagrams-${i}`; container.id = id; container.className = \"align-center mermaid\"; container.textContent = block.childNodes[0].textContent; rootElement.parentElement.replaceChild(container, rootElement); } window.mermaid.mermaidAPI.initialize( window.mermaidOptions ? window.mermaidOptions : { securityLevel: \"loose\", theme: \"base\" } // 替换它可以修改 mermaid 的样式=======↑ ); }; 在 main.js 中插入： // 个人比较喜欢插在 Even.sequence(); 的后面 Even.mermaid(); 现在你应该可以在自己的博客中写 mermaid 了。 ","date":"2021-01-29","objectID":"/add_mermaid_support_to_even_theme/:3:2","tags":["折腾","前端"],"title":"俺如何为 hugo-theme-even 提供 mermaid 支持","uri":"/add_mermaid_support_to_even_theme/"},{"categories":null,"content":"工具推荐 Typora 写 MarkDown 咋能少得了 「Typora」？ Visual Studio Code 俺写这篇文章用的无所不能的编辑器，建议添加插件： Markdown All in One Markdown Preview Enhanced Mermaid Markdown Syntax Highlighting 之所以用 Visual Studio Code，很大程度上是因为它的 Vim 拓展。 “2021年了不会还有人不会用 Vim 吧？” vim ","date":"2021-01-29","objectID":"/add_mermaid_support_to_even_theme/:3:3","tags":["折腾","前端"],"title":"俺如何为 hugo-theme-even 提供 mermaid 支持","uri":"/add_mermaid_support_to_even_theme/"},{"categories":null,"content":"迁移 直接跑路 又一次一时兴起, 这次惨遭毒手的是 vercel + github + hugo. 不说了, 静态博客真香, LNMP 还是不适合懒人. ","date":"2021-01-27","objectID":"/new_home/:1:0","tags":null,"title":"new_home","uri":"/new_home/"},{"categories":null,"content":"新博客功能演示 数学公式： $$ F(f) = \\int_{-\\infty}^{\\infty}{f(t)e^{-j2{\\pi}ft}}{\\rm d}t $$ 代码演示： -- font: sarasa-mono-sc -- using it to get better support for East Asian Characters especially Simplified Chinese. -- use haskell because it's beautiful -- and also can show whether you got font ligatures. quicksort1 :: (Ord a) =\u003e [a] -\u003e [a] quicksort1 [] = [] quicksort1 (x:xs) = let smallerSorted = quicksort1 [a | a \u003c- xs, a \u003c= x] biggerSorted = quicksort1 [a | a \u003c- xs, a \u003e x] in smallerSorted ++ [x] ++ biggerSorted #include\u003cstdio.h\u003e int main(int *argc, char **argv) { printf(\"%s, %s\\n\", argv[1], argv[2]); printf(\"输入两参数如上↑\\n\"); // 你可以发现中英文完全对齐 // 只是英文好挤好怪啊（恼 return 0; } flow chart: (unsupported) st=\u003estart: Start op=\u003eoperation: Your Operation cond=\u003econdition: Yes or No? e=\u003eend st-\u003eop-\u003econd cond(yes)-\u003ee cond(no)-\u003eop sequence diagrams: (unsupported) Client-\u003eServer: 你有 10492 的资源嘛？ Note right of Server: 稍加思索... Server-\u003eClient: \"http:200 OK:{state: 404}\" mermaid: ","date":"2021-01-27","objectID":"/new_home/:2:0","tags":null,"title":"new_home","uri":"/new_home/"},{"categories":null,"content":"who am I? 19 岁，是老垃圾👾。 ","date":"2021-01-27","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"经历 2018～2022: 就读于北京邮电大学。 ","date":"2021-01-27","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"友情链接 点击展开 🐟 大佬：Name1e5s Blog 缺氧甲醛：甲醛的技术博客 学分学长：fenxue’s corner 即将脱单的何巨巨：RinchanNow! 柯西莫🍊：Murphy ayamir: ayamir’s blog ","date":"2021-01-27","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"膜 迟先生：skyzh ","date":"2021-01-27","objectID":"/about/:3:0","tags":null,"title":"About","uri":"/about/"}]